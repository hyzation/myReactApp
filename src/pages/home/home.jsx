import './home.css'

import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'
import { useSpring } from '@react-spring/core'
import { a as three } from '@react-spring/three'
import { a as web } from '@react-spring/web'

function Model({ open, hinge, ...props }) {
    const list = [
        { name: '单一物体', src: '/test0', },
        { name: '地图查看', src: '/test1', },
        { name: '光照，阴影', src: '/test2', },
        { name: 'cameraShake', src: '/test3', },
        { name: '第三人称（待定）', src: '/test4', },
        { name: '第一人称', src: '/test5', },
        { name: '组件传值', src: '/test6', },
        { name: '模型平滑进入，鼠标灯光', src: '/test7', },
        { name: '导入模型文件测试', src: '/test8', },
        { name: '人脸捕捉', src: '/test9', },
        { name: '切换视角，倒影', src: '/test10', },
        { name: '音乐解析', src: '/test11', },
    ]
    const group = useRef()
    // Load model
    const { nodes, materials } = useGLTF('/model/mac-draco.glb')
    // Take care of cursor state on hover
    const [hovered, setHovered] = useState(false)
    useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
    // Make it float in the air when it's opened
    useFrame((state) => {
        const t = state.clock.getElapsedTime()
        // group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 10) / 4 : 0, 0.1)
        // group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 10) / 10 : 0, 0.1)

        group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 10) / 10 + 0.35 : 0, 0.05)
        group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (-20 + Math.sin(t)) / 8 : -4.3, 0.05)
        group.current.position.z = THREE.MathUtils.lerp(group.current.position.z, open ? (150 + Math.sin(t)) / 8 : -4.3, 0.05)
    })
    // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
    // Events and spring animations were added afterwards
    return (
        <group ref={group} {...props} onPointerOver={(e) => (e.stopPropagation(), setHovered(true))} onPointerOut={(e) => setHovered(false)} dispose={null}>
            <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
                <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
                    <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
                    <mesh/>
                    <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
                    <mesh geometry={nodes['Cube008_2'].geometry} >
                        <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
                            {/* <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}> */}
                            <div className='appBox'>
                                {
                                    list.map((item, index) => {
                                        return <a className='appTag' key={index} href={item.src}>
                                            <div className='appTagBox'>
                                                <div>{item.name}</div>
                                            </div>
                                        </a>
                                    })
                                }
                            </div>
                            {/* </div> */}
                        </Html>
                    </mesh>
                </group>
            </three.group>
            <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
            <group position={[0, -0.1, 3.39]}>
                <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
                <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
            </group>
            <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
        </group>
    )
}

export default function App() {
    // This flag controls open state, alternates between true & false
    const [open, setOpen] = useState(false)
    // We turn this into a spring animation that interpolates between 0 and 1
    const props = useSpring({ open: Number(open) })
    return (
        <web.main style={{ background: props.open.to([0, 1], ['#f0f0f0', 'rgb(40,40,40)']) }}>
            <web.h1 style={{ opacity: props.open.to([0, 1], [1, 0]), transform: props.open.to((o) => `translate3d(-50%,${o * 50 - 100}px,0)`) }}>WICKED</web.h1>
            <Canvas dpr={[1, 2]} camera={{ position: [0, 0, -30], fov: 35 }} style={{ width: '100%', height: '100vh', }}>
                {/* <three.pointLight position={[10, 10, 10]} intensity={1.5} color={props.open.to([0, 1], ['#f0f0f0', '#d25578'])} /> */}
                <Suspense fallback={null}>
                    <group rotation={[0, Math.PI, 0]} onClick={(e) => (e.stopPropagation(), setOpen(!open))}>
                        <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} />
                    </group>
                    <Environment files={'/hdr/warehouse.hdr'} />
                </Suspense>
                <ContactShadows position={[0, -4.5, 0]} opacity={0.4} scale={20} blur={1.75} far={4.5} />
                {/* <OrbitControls
                    makeDefault
                    minAzimuthAngle={0}
                    enableZoom={false}
                    enablePan={false}
                    zoomSpeed={3}
                /> */}
            </Canvas>
        </web.main>
    )
}


// import './home.css'

// export default function Home() {

//     const list = [
//         { name: '单一物体', src: '/test0', },
//         { name: '地图查看', src: '/test1', },
//         { name: '光照，clone，阴影', src: '/test2', },
//         { name: 'cameraShake', src: '/test3', },
//         { name: '平滑切换机位（lerp），阴影', src: '/test4', },
//         { name: '第一人称', src: '/test5', },
//         { name: '组件传值', src: '/test6', },
//         { name: '模型平滑进入，鼠标灯光', src: '/test7', },
//         { name: '导入模型文件测试', src: '/test8', },
//         { name: '捕捉人脸，眼睛', src: '/test9', },
//         { name: 'test10', src: '/test10', },
//         { name: 'test11', src: '/test11', },
//     ]

//     return (
//         <>
//             <div className='appBox'>
//                 {
//                     list.map((item, index) => {
//                         return <a className='appTag' key={index} href={item.src}>
//                             <div className='appTagBox'>
//                                 <div>{item.name}</div>
//                             </div>
//                         </a>
//                     })
//                 }
//             </div>
//         </>
//     );
// }