{"version":3,"file":"static/js/567.6548f168.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/node_modules/three-stdlib/math/SimplexNoise.js","../node_modules/@react-three/drei/core/CameraShake.js","../node_modules/@react-three/drei/node_modules/three-stdlib/loaders/RGBELoader.js","../node_modules/@react-three/drei/node_modules/three-stdlib/objects/GroundProjectedEnv.js","../node_modules/@react-three/drei/helpers/environment-assets.js","../node_modules/@react-three/drei/core/Environment.js","../node_modules/@react-three/drei/materials/ConvolutionMaterial.js","../node_modules/@react-three/drei/materials/BlurPass.js","../node_modules/@react-three/drei/materials/MeshReflectorMaterial.js","../node_modules/@react-three/drei/core/MeshReflectorMaterial.js","../node_modules/@react-three/drei/core/OrbitControls.js","../node_modules/@react-three/drei/web/useCursor.js","../node_modules/react-merge-refs/src/index.tsx"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };\n","import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n","import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n","import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide } from 'three';\n\nconst isCubeTexture = def => def && def.isCubeTexture;\n\nclass GroundProjectedEnv extends Mesh {\n  constructor(texture, options) {\n    var _ref, _texture$image$;\n\n    const isCubeMap = isCubeTexture(texture);\n    const w = (_ref = isCubeMap ? (_texture$image$ = texture.image[0]) === null || _texture$image$ === void 0 ? void 0 : _texture$image$.width : texture.image.width) != null ? _ref : 1024;\n    const cubeSize = w / 4;\n\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n\n    const _cubeSize = Math.pow(2, _lodMax);\n\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    const defines = [isCubeMap ? '#define ENVMAP_TYPE_CUBE' : '', `#define CUBEUV_TEXEL_WIDTH ${1.0 / width}`, `#define CUBEUV_TEXEL_HEIGHT ${1.0 / height}`, `#define CUBEUV_MAX_MIP ${_lodMax}.0`];\n    const vertexShader =\n    /* glsl */\n    `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `;\n    const fragmentShader = defines.join('\\n') +\n    /* glsl */\n    `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <encodings_fragment>\n        }\n        `;\n    const uniforms = {\n      map: {\n        value: texture\n      },\n      height: {\n        value: (options === null || options === void 0 ? void 0 : options.height) || 15\n      },\n      radius: {\n        value: (options === null || options === void 0 ? void 0 : options.radius) || 100\n      }\n    };\n    const geometry = new IcosahedronGeometry(1, 16);\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide\n    });\n    super(geometry, material);\n  }\n\n  set radius(radius) {\n    this.material.uniforms.radius.value = radius;\n  }\n\n  get radius() {\n    return this.material.uniforms.radius.value;\n  }\n\n  set height(height) {\n    this.material.uniforms.height.value = height;\n  }\n\n  get height() {\n    return this.material.uniforms.height.value;\n  }\n\n}\n\nexport { GroundProjectedEnv };\n","const presetsObj = {\n  sunset: 'venice/venice_sunset_1k.hdr',\n  dawn: 'kiara/kiara_1_dawn_1k.hdr',\n  night: 'dikhololo/dikhololo_night_1k.hdr',\n  warehouse: 'empty-wharehouse/empty_warehouse_01_1k.hdr',\n  forest: 'forrest-slope/forest_slope_1k.hdr',\n  apartment: 'lebombo/lebombo_1k.hdr',\n  studio: 'studio-small-3/studio_small_03_1k.hdr',\n  city: 'potsdamer-platz/potsdamer_platz_1k.hdr',\n  park: 'rooitou/rooitou_park_1k.hdr',\n  lobby: 'st-fagans/st_fagans_interior_1k.hdr'\n};\n\nexport { presetsObj };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree, useLoader, useFrame, createPortal, extend } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding, Scene, WebGLCubeRenderTarget, HalfFloatType, CubeTextureLoader } from 'three';\nimport { RGBELoader, GroundProjectedEnv } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/';\n\nconst isRef = obj => obj.current && obj.current.isScene;\n\nconst resolveScene = scene => isRef(scene) ? scene.current : scene;\n\nfunction EnvironmentMap({\n  scene,\n  background = false,\n  map\n}) {\n  const defaultScene = useThree(state => state.scene);\n  React.useLayoutEffect(() => {\n    if (map) {\n      const target = resolveScene(scene || defaultScene);\n      const oldbg = target.background;\n      const oldenv = target.environment;\n      if (background !== 'only') target.environment = map;\n      if (background) target.background = map;\n      return () => {\n        if (background !== 'only') target.environment = oldenv;\n        if (background) target.background = oldbg;\n      };\n    }\n  }, [defaultScene, scene, map, background]);\n  return null;\n}\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n}) {\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader;\n  const loaderResult = useLoader( // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nfunction EnvironmentCube({\n  background = false,\n  scene,\n  ...rest\n}) {\n  const texture = useEnvironment(rest);\n  const defaultScene = useThree(state => state.scene);\n  React.useLayoutEffect(() => {\n    const target = resolveScene(scene || defaultScene);\n    const oldbg = target.background;\n    const oldenv = target.environment;\n    if (background !== 'only') target.environment = texture;\n    if (background) target.background = texture;\n    return () => {\n      if (background !== 'only') target.environment = oldenv;\n      if (background) target.background = oldbg;\n    };\n  }, [texture, background, scene, defaultScene]);\n  return null;\n}\nfunction EnvironmentPortal({\n  children,\n  near = 1,\n  far = 1000,\n  resolution = 256,\n  frames = 1,\n  map,\n  background = false,\n  scene,\n  files,\n  path,\n  preset = undefined,\n  extensions\n}) {\n  const gl = useThree(state => state.gl);\n  const defaultScene = useThree(state => state.scene);\n  const camera = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  React.useLayoutEffect(() => {\n    if (frames === 1) camera.current.update(gl, virtualScene);\n    const target = resolveScene(scene || defaultScene);\n    const oldbg = target.background;\n    const oldenv = target.environment;\n    if (background !== 'only') target.environment = fbo.texture;\n    if (background) target.background = fbo.texture;\n    return () => {\n      if (background !== 'only') target.environment = oldenv;\n      if (background) target.background = oldbg;\n    };\n  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);\n  let count = 1;\n  useFrame(() => {\n    if (frames === Infinity || count < frames) {\n      camera.current.update(gl, virtualScene);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal( /*#__PURE__*/React.createElement(React.Fragment, null, children, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: camera,\n    args: [near, far, fbo]\n  }), files || preset ? /*#__PURE__*/React.createElement(EnvironmentCube, {\n    background: true,\n    files: files,\n    preset: preset,\n    path: path,\n    extensions: extensions\n  }) : map ? /*#__PURE__*/React.createElement(EnvironmentMap, {\n    background: true,\n    map: map,\n    extensions: extensions\n  }) : null), virtualScene));\n}\n\nfunction EnvironmentGround(props) {\n  var _props$ground, _props$ground2, _scale, _props$ground3;\n\n  const textureDefault = useEnvironment(props);\n  const texture = props.map || textureDefault;\n  React.useMemo(() => {\n    extend({\n      GroundProjectedEnvImpl: GroundProjectedEnv\n    });\n  }, []);\n  const args = React.useMemo(() => [texture], [texture]);\n  const height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;\n  const radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;\n  const scale = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1000;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EnvironmentMap, _extends({}, props, {\n    map: texture\n  })), /*#__PURE__*/React.createElement(\"groundProjectedEnvImpl\", {\n    args: args,\n    scale: scale,\n    height: height,\n    radius: radius\n  }));\n}\n\nfunction Environment(props) {\n  return props.ground ? /*#__PURE__*/React.createElement(EnvironmentGround, props) : props.map ? /*#__PURE__*/React.createElement(EnvironmentMap, props) : props.children ? /*#__PURE__*/React.createElement(EnvironmentPortal, props) : /*#__PURE__*/React.createElement(EnvironmentCube, props);\n}\n\nexport { Environment, EnvironmentCube, EnvironmentMap, EnvironmentPortal, useEnvironment };\n","import { ShaderMaterial, Uniform, Vector2, NoBlending } from 'three';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor(texelSize = new Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        depthBuffer: new Uniform(null),\n        resolution: new Uniform(new Vector2()),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0),\n        cameraNear: new Uniform(0.0),\n        cameraFar: new Uniform(1.0),\n        minDepthThreshold: new Uniform(0.0),\n        maxDepthThreshold: new Uniform(1.0),\n        depthScale: new Uniform(0.0),\n        depthToBlurRatioBias: new Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n\n}\n\nexport { ConvolutionMaterial };\n","import { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };\n","import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, HalfFloatType, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  reflectorOffset = 0,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding,\n      type: HalfFloatType\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd, controls, invalidate]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n","import * as React from 'react';\n\nfunction useCursor(hovered, onPointerOver = 'pointer', onPointerOut = 'auto') {\n  React.useEffect(() => {\n    if (hovered) {\n      document.body.style.cursor = onPointerOver;\n      return () => void (document.body.style.cursor = onPointerOut);\n    }\n  }, [hovered]);\n}\n\nexport { useCursor };\n","import * as React from \"react\";\n\nexport default function mergeRefs<T = any>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n"],"names":["SimplexNoise","r","Math","_defineProperty","this","g","x","y","z","w","xin","yin","s","sqrt","i","floor","j","G2","t","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","perm","gi1","gi2","t0","t1","t2","dot","grad3","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","dot3","l1","l2","i3","j3","k3","l3","grad4","simplex","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","dot4","p","random","CameraShake","React","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","camera","useThree","state","defaultControls","controls","intensityRef","initialRotation","rotation","clone","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","getIntensity","setIntensity","val","callback","addEventListener","removeEventListener","useFrame","delta","shake","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","RGBELoader","manager","type","HalfFloatType","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","pos","len","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","RGBEByteToRGBHalf","DataUtils","min","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","charAt","parseFloat","parseInt","RGBE_ReadHeader","h","image_rgba_data","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","off","RGBE_ReadPixels_RLE","data","numElements","FloatType","floatArray","Float32Array","halfArray","value","url","onLoad","onProgress","onError","texture","texData","encoding","LinearEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","DataTextureLoader","GroundProjectedEnv","options","_ref","_texture$image$","def","isCubeMap","isCubeTexture","cubeSize","image","_lodMax","log2","_cubeSize","max","fragmentShader","join","uniforms","map","radius","geometry","IcosahedronGeometry","material","ShaderMaterial","vertexShader","side","DoubleSide","Mesh","presetsObj","sunset","dawn","night","warehouse","forest","apartment","studio","city","park","lobby","resolveScene","scene","obj","isScene","EnvironmentMap","background","defaultScene","target","oldbg","oldenv","environment","useEnvironment","files","path","preset","undefined","extensions","Error","Object","keys","Array","isArray","loader","CubeTextureLoader","loaderResult","useLoader","setPath","mapping","CubeReflectionMapping","EquirectangularReflectionMapping","sRGBEncoding","EnvironmentCube","EnvironmentPortal","children","near","far","resolution","frames","gl","Scene","virtualScene","fbo","WebGLCubeRenderTarget","update","Infinity","createPortal","args","EnvironmentGround","props","_props$ground","_props$ground2","_scale","_props$ground3","textureDefault","extend","GroundProjectedEnvImpl","ground","_extends","Environment","ConvolutionMaterial","texelSize","Vector2","inputBuffer","Uniform","depthBuffer","halfTexelSize","kernel","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","blending","NoBlending","depthWrite","depthTest","toneMapped","setTexelSize","multiplyScalar","copy","BlurPass","renderToScreen","renderTargetA","WebGLRenderTarget","stencilBuffer","outputEncoding","renderTargetB","convolutionMaterial","setResolution","Camera","defines","USE_DEPTH","vertices","uvs","BufferGeometry","setAttribute","BufferAttribute","screen","frustumCulled","add","renderer","outputBuffer","depthTexture","destRT","lastRT","setRenderTarget","render","MeshReflectorMaterial","parameters","_tDepth","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","shader","_shader$defines","USE_UV","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","distortion","mixContrast","replace","v","MeshStandardMaterial","MeshReflectorMaterialImpl","MeshReflectorMaterial$1","blur","reflectorOffset","materialRef","Plane","reflectorPlane","Vector3","normal","reflectorWorldPosition","cameraWorldPosition","Matrix4","rotationMatrix","lookAtPosition","Vector4","clipPlane","view","q","PerspectiveCamera","virtualCamera","beforeRender","_materialRef$current","parent","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","addScaledVector","subVectors","reflect","negate","position","up","lookAt","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","constant","sign","elements","fbo1","DepthTexture","DepthFormat","UnsignedShortType","fbo2","blurpass","reflectorProps","_materialRef$current2","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","buffers","depth","setMask","autoClear","clear","attach","key","mergeRefs","OrbitControls","makeDefault","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","invalidate","defaultCamera","events","get","performance","explCamera","explDomElement","connected","OrbitControls$1","connect","dispose","old","object","useCursor","hovered","onPointerOver","onPointerOut","document","body","style","cursor","refs","forEach"],"sourceRoot":""}