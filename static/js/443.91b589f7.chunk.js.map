{"version":3,"file":"static/js/443.91b589f7.chunk.js","mappings":"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","sources":["pages/test5/Ground.jsx","pages/test5/Player.jsx","pages/test5/Cube.jsx","components/Stars.jsx","pages/test5/NewSky.jsx","pages/test5/test5.jsx","routes/test5.jsx"],"sourcesContent":["import * as THREE from \"three\"\r\nimport { useTexture, MeshReflectorMaterial } from \"@react-three/drei\"\r\nimport { CuboidCollider, RigidBody } from \"@react-three/rapier\"\r\nimport grass from \"./assets/sand.jpg\"\r\n\r\nexport default function Ground(props) {\r\n    const texture = useTexture(grass)\r\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping\r\n    return (\r\n        <RigidBody {...props} type=\"fixed\" colliders={false}>\r\n            <mesh receiveShadow position={[0, 0, 0]} rotation-x={-Math.PI / 2}>\r\n                <planeGeometry args={[800, 800]} />\r\n                {/* <meshStandardMaterial\r\n                    map={texture}\r\n                    map-repeat={[50, 50]}\r\n                // color=\"green\"\r\n                /> */}\r\n                {/* <MeshReflectorMaterial\r\n                    // blur={[300, 100]}\r\n                    resolution={2048}\r\n                    mixBlur={0}\r\n                    mixStrength={1}\r\n                    roughness={1}\r\n                    depthScale={20}\r\n                    minDepthThreshold={2}\r\n                    maxDepthThreshold={1.9}\r\n                    // color=\"rgb(20,23,70)\"\r\n                    color=\"#333\"\r\n                    metalness={3}\r\n                /> */}\r\n                <meshStandardMaterial\r\n                    color=\"grey\"\r\n                />\r\n            </mesh>\r\n            <CuboidCollider args={[400, 1, 400]} position={[0, 0, 0]} />\r\n        </RigidBody>\r\n    )\r\n}\r\n","import * as THREE from \"three\"\r\nimport * as RAPIER from \"@dimforge/rapier3d-compat\"\r\nimport { useRef } from \"react\"\r\nimport { useThree, useFrame } from \"@react-three/fiber\"\r\nimport { useKeyboardControls } from \"@react-three/drei\"\r\nimport { CapsuleCollider, RigidBody, useRapier } from \"@react-three/rapier\"\r\n// import Axe from \"./Axe\"\r\n\r\nconst SPEED = 70\r\nconst direction = new THREE.Vector3()\r\nconst frontVector = new THREE.Vector3()\r\nconst sideVector = new THREE.Vector3()\r\nconst rotation = new THREE.Vector3()\r\n\r\nexport default function Player(props, { lerp = THREE.MathUtils.lerp }) {\r\n    // const axe = useRef()\r\n    const ref = useRef()\r\n    const rapier = useRapier()\r\n    const { camera } = useThree()\r\n    const [, get] = useKeyboardControls()\r\n    useFrame((state) => {\r\n        const { forward, backward, left, right, jump } = get()\r\n        const velocity = ref.current.linvel()\r\n        // update camera\r\n        camera.position.set(...ref.current.translation())\r\n        // update axe\r\n\r\n        // axe.current.children[0].rotation.x = lerp(axe.current.children[0].rotation.x, Math.sin((velocity.length() > 1) * state.clock.elapsedTime * 10) / 6, 0.1)\r\n        // axe.current.rotation.copy(camera.rotation)\r\n        // axe.current.position.copy(camera.position).add(camera.getWorldDirection(rotation).multiplyScalar(1))\r\n\r\n        // movement\r\n        frontVector.set(0, 0, backward - forward)\r\n        sideVector.set(left - right, 0, 0)\r\n        direction.subVectors(frontVector, sideVector).normalize().multiplyScalar(SPEED).applyEuler(camera.rotation)\r\n        ref.current.setLinvel({ x: direction.x, y: velocity.y, z: direction.z })\r\n        // jumping\r\n        const world = rapier.world.raw()\r\n        const ray = world.castRay(new RAPIER.Ray(ref.current.translation(), { x: 0, y: -1, z: 0 }))\r\n        const grounded = ray && ray.collider && Math.abs(ray.toi) <= 1.75\r\n        if (jump) ref.current.setLinvel({ x: 0, y: 102, z: 0 })\r\n    })\r\n    return (\r\n        <>\r\n            <RigidBody {...props} ref={ref} scale={3} colliders={false} mass={1} type=\"dynamic\" enabledRotations={[false, false, false]}>\r\n                <CapsuleCollider args={[0.75, 0.5]} />\r\n            </RigidBody>\r\n            {/* <group ref={axe} onPointerMissed={(e) => (axe.current.children[0].rotation.x = -0.5)}>\r\n                <Axe position={[0.3, -0.35, 0.5]} />\r\n            </group> */}\r\n        </>\r\n    )\r\n}\r\n","import { useCallback, useRef, useState, useEffect, Suspense } from \"react\"\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { useTexture, useGLTF, useFBX, useAnimations, Environment, Clone, MeshDistortMaterial, Billboard, Sparkles, PositionalAudio, RenderTexture, Text, PerspectiveCamera, Decal, Detailed } from \"@react-three/drei\"\nimport { RigidBody, RigidBodyApi } from \"@react-three/rapier\"\nimport { LayerMaterial, Depth } from 'lamina'\nimport { useControls } from 'leva'\nimport { EffectComposer, Glitch, Bloom, Selection, Select, Outline, SelectiveBloom } from \"@react-three/postprocessing\";\nimport { GlitchMode } from \"postprocessing\";\n\nimport create from \"zustand\"\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useLoader } from \"@react-three/fiber\";\n\nimport * as THREE from 'three'\n\nimport dirt from \"./assets/dirt.jpg\"\n\n// This is a super naive implementation and wouldn't allow for more than a few thousand boxes.\n// In order to make this scale this has to be one instanced mesh, then it could easily be\n// hundreds of thousands.\n\nconst useCubeStore = create((set) => ({\n  cubes: [],\n  addCube: (x, y, z) => set((state) => ({ cubes: [...state.cubes, [x, y, z]] })),\n}))\n\n// 盒子堆\nexport const Cubes = () => {\n  const cubes = useCubeStore((state) => state.cubes)\n  return cubes.map((coords, index) => <Cube key={index} position={coords} />)\n}\n\n// 盒子\nexport const Cube = (props) => {\n  const ref = useRef()\n  const [hover, set] = useState(null)\n  const addCube = useCubeStore((state) => state.addCube)\n  const texture = useTexture(dirt)\n  const onMove = useCallback((e) => {\n    e.stopPropagation()\n    set(Math.floor(e.faceIndex / 2))\n  }, [])\n  const onOut = useCallback(() => set(null), [])\n  const onClick = useCallback((e) => {\n    e.stopPropagation()\n    const { x, y, z } = ref.current.translation()\n    const dir = [\n      [x + 1, y, z],\n      [x - 1, y, z],\n      [x, y + 1, z],\n      [x, y - 1, z],\n      [x, y, z + 1],\n      [x, y, z - 1],\n    ]\n    addCube(...dir[Math.floor(e.faceIndex / 2)])\n  }, [])\n  return (\n    <RigidBody {...props} type=\"fixed\" colliders=\"cuboid\" ref={ref}>\n      <mesh onPointerMove={onMove} onPointerOut={onOut} onClick={onClick}>\n        {[...Array(6)].map((_, index) => (\n          <meshStandardMaterial attach={`material-${index}`} key={index} map={texture} color={hover === index ? \"green\" : \"white\"} />\n        ))}\n        <boxGeometry />\n      </mesh>\n    </RigidBody>\n  )\n}\n\n// 入口\nexport const Enter = (props) => {\n  const gltf1 = useLoader(GLTFLoader, '/model/buildings/emtrance.glb');\n  return (\n    <RigidBody {...props} type=\"fixed\" colliders=\"trimesh\">\n      <Clone object={gltf1.scene} scale={10} />\n    </RigidBody>\n  )\n}\n\n// 展厅1\nexport const Hall1 = (props) => {\n  const nodes = useGLTF('/model/buildings/hologram.glb')\n  const { ref, actions, names } = useAnimations(nodes.animations)\n  const boxref = useRef()\n  useEffect(() => {\n    actions[names[0]].play();\n  }, [actions, names]);\n\n  return (\n    <>\n      <group ref={boxref} {...props}>\n        {/* <Environment preset=\"warehouse\" /> */}\n        <primitive ref={ref} object={nodes.scene}\n          // position={[800, 0, 0]} scale={120}\n          position={[0, 14, 0]} scale={8}\n        />\n        {/* <Sparkles count={50} scale={[500,500,1200]} size={200} speed={2} position={[500, 12, 0]} /> */}\n      </group>\n    </>\n  )\n}\n\n// 展厅2\nexport const Hall2 = (props) => {\n  const gltf1 = useLoader(GLTFLoader, '/model/buildings/cj2.glb');\n  return (\n    <RigidBody {...props} type=\"fixed\" colliders=\"cuboid\">\n      <Clone object={gltf1.scene} scale={5} />\n    </RigidBody>\n  )\n}\n\n// 双子塔\nexport const Gemini = (props) => {\n  const gltf = useLoader(GLTFLoader, '/model/buildings/gemini.glb');\n  return (\n    <RigidBody {...props} type=\"fixed\" colliders=\"trimesh\">\n      <Clone object={gltf.scene} scale={2.5} />\n      {/* <Environment files={'/hdr/warehouse.hdr'}/> */}\n    </RigidBody>\n  )\n}\n\n// 飞船\nexport const Ship = (props) => {\n  const gltf = useLoader(GLTFLoader, '/model/spaceship.glb');\n  const ref = useRef()\n  useFrame(() => {\n    ref.current.rotation.y -= 0.005;\n  });\n  return (\n    <RigidBody {...props} type=\"fixed\" colliders=\"cuboid\" >\n      <primitive ref={ref} object={gltf.scene} scale={.4} />\n    </RigidBody>\n  )\n}\n\n// 雕像\nexport const Statue = (props) => {\n  const gltf = useLoader(GLTFLoader, '/model/face.glb');\n\n  // const ref = useRef();\n  // useFrame((state) => {\n  //   const t = state.clock.getElapsedTime()\n  //   ref.current.setNextKinematicTranslation({ x: -1200, y: 750 + Math.sin(t * 1) / 3, z: -80 })\n  // })\n\n\n  return (\n    <group {...props}>\n      {/* <Selection>\n        <EffectComposer>\n          <SelectiveBloom\n            luminanceThreshold={0}\n            luminanceSmoothing={0.1}\n            height={300}\n            opacity={3}\n          />\n        </EffectComposer>\n        <Select enabled={true}> */}\n          <Clone\n            // ref={ref} \n            object={gltf.scene}\n            rotation={[Math.PI / 6, 0, 0]}\n          />\n        {/* </Select>\n      </Selection> */}\n      {/* <RigidBody ref={ref} {...props} type=\"kinematicPosition\" colliders=\"cuboid\"> */}\n\n      {/* </RigidBody> */}\n    </group>\n  )\n}\n\n// 魔法书\nexport const MagicBook = (props) => {\n  const gltf = useLoader(GLTFLoader, '/model/buildings/magicBook.glb');\n  const [bookcolor, setBookcolor] = useState(null)\n  const onMove = () => {\n    setBookcolor('red')\n  }\n  const onOut = () => {\n    setBookcolor('grey')\n  }\n  const onClick = () => {\n    props.click(123)\n  }\n  return (\n    <RigidBody onPointerMove={onMove} onPointerOut={onOut} onClick={onClick} {...props} type=\"kinematicPosition\" colliders=\"cuboid\">\n      {/* <pointLight intensity={5} position={[0, 0, 0]} color={bookcolor} /> */}\n      <Clone object={gltf.scene} scale={1} />\n    </RigidBody>\n  )\n}\n\n// 动态立柱\nexport const LightTube = (props) => {\n  const nodes = useGLTF('/model/lightTube.glb')\n  const { ref, actions, names } = useAnimations(nodes.animations)\n  const boxref = useRef()\n  useEffect(() => {\n    actions[names[0]].play();\n  }, [actions, names]);\n\n  return (\n    <>\n      <group ref={boxref} {...props}>\n        {/* <Environment preset=\"warehouse\" /> */}\n        <Clone ref={ref} object={nodes.scene}\n          // position={[800, 0, 0]} scale={120}\n          position={[0, 12, 0]}\n          scale={25}\n          rotation={[0, 0, Math.PI / 2]}\n        />\n      </group>\n    </>\n  )\n}\n\n// 行星圈\nexport const CityRing = (props) => {\n  const ref = useRef()\n  const gltf = useLoader(GLTFLoader, '/model/buildings/cityRing.glb');\n  useFrame(() => {\n    ref.current.rotation.z -= 0.001;\n  });\n  return (\n    <group ref={ref} {...props}>\n      <Clone object={gltf.scene} scale={[100, 100, 100]} />\n    </group>\n  )\n}\n\n// 鲸鱼\n// FBX\n// export const Whale = (props) => {\n//   const fbx = useFBX(\"/model/fbx/whale/source/whale.fbx\");\n//   const { ref, actions, names } = useAnimations(fbx.animations);\n//   useEffect(() => {\n//     console.log(fbx);\n//     console.log(actions);\n//     console.log(ref);\n//     if (actions && names) actions[names[0]].play();\n//   }, [actions, names]);\n//   return (\n//     <RigidBody type=\"fixed\" colliders=\"cuboid\">\n//       <primitive {...props} ref={ref} object={fbx} scale={5} />\n//     </RigidBody>\n//   )\n// }\n\n// 鲸鱼\n// GLB\nexport const Whale = (props) => {\n  const nodes = useGLTF(\"/model/whale1.glb\")\n  const { ref, actions, names } = useAnimations(nodes.animations)\n  const boxref = useRef()\n  useEffect(() => {\n    actions[names[0]].play();\n  }, [actions, names]);\n  useFrame(() => {\n    boxref.current.rotation.y -= 0.001;\n  });\n  return (\n    // <RigidBody type=\"fixed\" colliders=\"trimesh\">\n    <group ref={boxref} {...props}>\n      <primitive ref={ref} object={nodes.scene}\n        position={[1000, 0, 0]} scale={90}\n      />\n      {/* <Sparkles count={50} scale={[500,500,1200]} size={200} speed={2} position={[500, 12, 0]} /> */}\n    </group>\n    // </RigidBody>\n  )\n}\n\n// 背景音乐盒子(drei)\n// export const Bgm = (props) => {\n//   const sound = useRef()\n//   useEffect(() => {\n//     setTimeout(() => {\n//       sound.current.play()\n//     }, 100)\n//   }, []);\n//   return (\n//     <Suspense fallback={null}>\n//       <PositionalAudio ref={sound} loop url=\"/sound/foreverYoung.mp3\" distance={100} />\n//     </Suspense>\n//   )\n// }\n\n// 背景音乐盒子(three)\nexport const Bgm = (props) => {\n  const ref = useRef()\n  const { size, viewport, camera, gl } = useThree()\n  const [sound, setSound] = useState()\n  const [listener, setListener] = useState()\n  const [analyser, setAnalyser] = useState()\n  const [data, setData] = useState(1)\n\n  useEffect(() => {\n    const listener = new THREE.AudioListener()\n    setListener(listener)\n    const sound = new THREE.PositionalAudio(listener)\n    setSound(sound)\n    const analyser = new THREE.AudioAnalyser(sound, 32)\n    setAnalyser(analyser)\n    const audioLoader = new THREE.AudioLoader()\n    audioLoader.load('/sound/SICKOMODE.mp3', (buffer) => {\n      sound.setBuffer(buffer)\n      sound.setLoop(true)\n      sound.setVolume(32)\n      sound.play()\n    })\n  }, []);\n\n\n  useEffect(() => {\n    if (ref.current && camera && listener) {\n      camera.add(listener)\n      ref.current.add(sound)\n    }\n  }, [listener, camera, sound])\n\n  useFrame((state) => {\n    if (ref.current) {\n      const data = analyser.getAverageFrequency()\n      console.log(data);\n      setData(data)\n      // ref.current.position.x = lerp(ref.current.position.x, mouse.current[0] / aspect / 10, 0.1)\n      // ref.current.rotation.x = lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 50, 0.1)\n      // ref.current.rotation.y = 0.2\n    }\n  })\n\n  return (\n    <>\n      <Suspense fallback={null}>\n        <group ref={ref}>\n          <Text\n            size={16}\n          >\n            XXX\n          </Text>\n        </group>\n      </Suspense>\n    </>\n  )\n}\n\n\n// 测试周身特效 粒子 √ 光晕 ×\nexport const Sphere = ({ size = 1, amount = 50, color = 'white', emissive, glow, ...props }) => {\n  return (\n    <mesh {...props}>\n      <sphereGeometry args={[size, 64, 64]} />\n      <meshPhysicalMaterial color={color} emissive={emissive || color} envMapIntensity={0.2} metalness={1} roughness={.01}\n      />\n      {/* <Glow scale={1} near={-25} color={\"green\"} /> */}\n      {/* <Sparkles count={amount} scale={size * 2} size={6} speed={0.4} /> */}\n      {/* <Shadow rotation={[-Math.PI / 2, 0, 0]} scale={size} position={[0, -size, 0]} color={emissive} opacity={0.5} /> */}\n    </mesh>\n  )\n}\n\nconst Glow = ({ color, scale = 0.5, near = -2, far = 1.4 }) => (\n  <Billboard>\n    <mesh>\n      <circleGeometry args={[2 * scale, 16]} />\n      <LayerMaterial\n        transparent\n        depthWrite={false}\n        blending={THREE.CustomBlending}\n        blendEquation={THREE.AddEquation}\n        blendSrc={THREE.SrcAlphaFactor}\n        blendDst={THREE.DstAlphaFactor}>\n        <Depth colorA={color} colorB=\"black\" alpha={1} mode=\"normal\" near={near * scale} far={far * scale} origin={[0, 0, 0]} />\n        <Depth colorA={color} colorB=\"black\" alpha={0.5} mode=\"add\" near={-40 * scale} far={far * 1.2 * scale} origin={[0, 0, 0]} />\n        <Depth colorA={color} colorB=\"black\" alpha={1} mode=\"add\" near={-15 * scale} far={far * 0.7 * scale} origin={[0, 0, 0]} />\n        <Depth colorA={color} colorB=\"black\" alpha={1} mode=\"add\" near={-10 * scale} far={far * 0.68 * scale} origin={[0, 0, 0]} />\n      </LayerMaterial>\n    </mesh>\n  </Billboard>\n)\n\n\n\n\n\n\n\n\n// 测试\nexport const Test = (props) => {\n  const nodes = useGLTF('/model/buildings/hologram.glb')\n  const { ref, actions, names } = useAnimations(nodes.animations)\n  const boxref = useRef()\n  useEffect(() => {\n    actions[names[0]].play();\n  }, [actions, names]);\n\n  return (\n    <>\n      <group ref={boxref} {...props}>\n        {/* <Environment preset=\"warehouse\" /> */}\n        <primitive ref={ref} object={nodes.scene}\n          // position={[800, 0, 0]} scale={120}\n          position={[0, 14, 0]} scale={8}\n        />\n        {/* <Sparkles count={50} scale={[500,500,1200]} size={200} speed={2} position={[500, 12, 0]} /> */}\n      </group>\n    </>\n  )\n}","import React, {\r\n  useRef,\r\n  // useState\r\n} from \"react\";\r\nimport {\r\n  OrbitControls,\r\n  PerspectiveCamera,\r\n  // Plane,\r\n  Stars,\r\n} from \"@react-three/drei\";\r\n// import { Perf } from \"r3f-perf\";\r\n// import DotsRender from '../model/MR/DotsRender';\r\n// import Dots from '../model/MR/Dots';\r\nimport { useFrame } from '@react-three/fiber';\r\n\r\n/**\r\n * 默认场景\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function StarsScene() {\r\n  const AmbientLightIntensity = 0.3;\r\n  const cam = useRef();\r\n\r\n  const ref = useRef()\r\n\r\n  useFrame(() => {\r\n    ref.current.rotation.y -= 0.0001;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <PerspectiveCamera makeDefault\r\n        ref={cam}\r\n        position={[0, 10, 10]}\r\n        fov={75} far={2000}\r\n      /> */}\r\n      <Stars ref={ref} radius={500} depth={100} count={5000} factor={20} saturation={0} fade speed={3} />\r\n      <ambientLight color=\"#FFFFFF\" groundColor=\"blue\" intensity={AmbientLightIntensity} />\r\n\r\n      {/* <Plane args={[55, 55, 25, 25]} rotation={[-Math.PI / 2, 0, 0]}>\r\n        <meshPhongMaterial color=\"#222\" attach=\"material\" wireframe />\r\n      </Plane> */}\r\n\r\n\r\n      {/* <Perf position='bottom-right' /> */}\r\n\r\n    </>\r\n  )\r\n}\r\n","import { Suspense } from \"react\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport {\r\n    CubeTextureLoader,\r\n} from \"three\";\r\n\r\nexport default function NewSky() {\r\n    const Sky = () => {\r\n        const { scene } = useThree();\r\n        const loader = new CubeTextureLoader();\r\n        // const texture = loader.load([\r\n        //     \"/image/space/right.jpg\",\r\n        //     \"/image/space/left.jpg\",\r\n        //     \"/image/space/top.jpg\",\r\n        //     \"/image/space/bottom.jpg\",\r\n        //     \"/image/space/front.jpg\",\r\n        //     \"/image/space/back.jpg\",\r\n        // ]);\r\n        const texture = loader.load([\r\n            \"/image/space2/right.jpg\",\r\n            \"/image/space2/left.jpg\",\r\n            \"/image/space2/right.jpg\",\r\n            \"/image/space2/bottom.jpg\",\r\n            \"/image/space2/front.jpg\",\r\n            \"/image/space2/back.jpg\",\r\n        ]);\r\n        scene.background = texture;\r\n        return null;\r\n    }\r\n    return (\r\n        <>\r\n            <Suspense fallback={null}>\r\n                <Sky />\r\n            </Suspense>\r\n        </>\r\n    )\r\n}\r\n","import React, { Suspense, useState } from 'react'\r\nimport { Canvas } from \"@react-three/fiber\"\r\nimport { Sky, PointerLockControls, KeyboardControls, OrbitControls, useTexture } from \"@react-three/drei\"\r\nimport { Physics, Debug } from \"@react-three/rapier\"\r\nimport { useControls } from 'leva'\r\n\r\nimport Ground from \"./Ground\"\r\nimport Player from \"./Player\"\r\nimport { Test, Cube, Cubes, Hall1, Hall2, Enter, Gemini, Statue, Ship, Whale, Sphere, Bgm, CityRing, MagicBook, LightTube } from \"./Cube\"\r\nimport Stars from '../../components/Stars'\r\nimport NewSky from './NewSky'\r\n\r\nimport { Perf } from \"r3f-perf\";\r\n\r\nimport './test5.css'\r\n\r\n\r\nexport default function Index() {\r\n    const { Hall1Pos, Hall2Pos, EnterPos } = useControls({\r\n        Hall1Pos: [-230, -1.9, 250],\r\n        Hall2Pos: [230, -1.9, 250],\r\n        EnterPos: [-17, 4, 255],\r\n    })\r\n\r\n    const [Ppos, setpPos] = useState([0, 50, 200])\r\n\r\n    const toTheSky = () => {\r\n        setpPos([-100, 530, -300])\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <KeyboardControls\r\n                map={[\r\n                    { name: \"forward\", keys: [\"ArrowUp\", \"w\", \"W\"] },\r\n                    { name: \"backward\", keys: [\"ArrowDown\", \"s\", \"S\"] },\r\n                    { name: \"left\", keys: [\"ArrowLeft\", \"a\", \"A\"] },\r\n                    { name: \"right\", keys: [\"ArrowRight\", \"d\", \"D\"] },\r\n                    { name: \"jump\", keys: [\"Space\"] },\r\n                ]}>\r\n                <Canvas\r\n                    // shadows\r\n                    camera={{ fov: 50, far: 20000, }}\r\n                >\r\n                    <NewSky />\r\n                    <Suspense fallback={null}>\r\n                        {/* <Sky sunPosition={[100, 20, 100]}/> */}\r\n                        <ambientLight intensity={.3} />\r\n                        <pointLight castShadow intensity={0.8} position={[100, 100, 100]}\r\n                            shadow-mapSize-height={1024}\r\n                            shadow-mapSize-width={1024}\r\n                            shadow-radius={10}\r\n                            shadow-bias={-0.0001}\r\n                        />\r\n                        {/* 星空 */}\r\n                        <Stars />\r\n                        <Physics gravity={[0, -30, 0]}>\r\n                            <Ground />\r\n                            {/* 第一人称 */}\r\n                            <Player position={Ppos} />\r\n                            {/* 方块 */}\r\n                            {/* <Cube position={[10, 0.5, 0]} /> */}\r\n                            {/* <Cubes /> */}\r\n                            {/* 入口 */}\r\n                            {/* <Enter position={EnterPos} /> */}\r\n                            {/* 展厅1 */}\r\n                            <Hall1 position={Hall1Pos} rotation-y={Math.PI / 2} />\r\n                            {/* 展厅2 */}\r\n                            <Hall2 position={Hall2Pos} rotation-y={-Math.PI / 2} />\r\n                            {/* 双子塔 */}\r\n                            <Gemini position={[0, 500, -300]} />\r\n                            {/* 粒子立柱 */}\r\n                            <LightTube position={[-300, 0, 350]} scale={20} />\r\n                            <LightTube position={[450, 0, 350]} scale={20} />\r\n                            <LightTube position={[50, 0, -200]} scale={20} />\r\n                            {/* 鲸 */}\r\n                            <Whale position={[-370, 500, 100]} />\r\n                            {/* 中间球 */}\r\n                            {/* <Sphere position={[0, 0, 0]} scale={20} /> */}\r\n                            {/* 人脸 */}\r\n                            <Statue position={[-1300, 600, -200]} scale={1.9} rotation-y={Math.PI / 2} />\r\n                            {/* 行星圈 */}\r\n                            <CityRing position={[0, 0, 2000]} scale={30} />\r\n                            {/* 魔法书 */}\r\n                            <MagicBook position={[-180, 0, -215]} scale={1} click={toTheSky} />\r\n                            {/* 背景音乐 */}\r\n                            <Bgm position={[0, 0, 0]} scale={5} />\r\n                            {/* 测试 */}\r\n                            {/* <Test position={[-100, 0, 0]} scale={1} /> */}\r\n\r\n                            {/* 显示周身体积线 */}\r\n                            {/* <Debug /> */}\r\n                        </Physics>\r\n                        <PointerLockControls />\r\n\r\n                        {/* 测试用视角 */}\r\n                        {/* <OrbitControls\r\n                            makeDefault\r\n                            minAzimuthAngle={0}\r\n                            minDistance={12}\r\n                            // minDistance={100}\r\n                            enableZoom={true}\r\n                            enablePan={true}\r\n                            zoomSpeed={3}\r\n                        /> */}\r\n\r\n                        <Perf position='bottom-right' />\r\n                    </Suspense>\r\n                </Canvas>\r\n            </KeyboardControls>\r\n        </>\r\n    )\r\n\r\n}","import Test5 from \"../pages/test5/test5\";\r\n\r\n\r\nexport default function Index() {\r\n    return (\r\n        <>\r\n            <Test5 />\r\n        </>\r\n    );\r\n}"],"names":["Ground","props","texture","useTexture","grass","wrapS","wrapT","THREE","type","colliders","receiveShadow","position","Math","PI","args","color","direction","frontVector","sideVector","Player","lerp","ref","useRef","rapier","useRapier","camera","useThree","useKeyboardControls","get","useFrame","state","forward","backward","left","right","jump","velocity","current","linvel","set","translation","subVectors","normalize","multiplyScalar","applyEuler","rotation","setLinvel","x","y","z","ray","world","raw","castRay","RAPIER","collider","abs","toi","scale","mass","enabledRotations","Hall1","create","cubes","addCube","nodes","useGLTF","useAnimations","animations","actions","names","boxref","useEffect","play","object","scene","Hall2","gltf1","useLoader","GLTFLoader","Gemini","gltf","Statue","MagicBook","useState","setBookcolor","onPointerMove","onPointerOut","onClick","click","LightTube","CityRing","Whale","Bgm","size","viewport","gl","sound","setSound","listener","setListener","analyser","setAnalyser","setData","load","buffer","setBuffer","setLoop","setVolume","add","data","getAverageFrequency","console","log","Suspense","fallback","Text","StarsScene","Stars","radius","depth","count","factor","saturation","fade","speed","groundColor","intensity","NewSky","Sky","CubeTextureLoader","background","Index","useControls","Hall1Pos","Hall2Pos","EnterPos","Ppos","setpPos","KeyboardControls","map","name","keys","fov","far","castShadow","gravity","PointerLockControls"],"sourceRoot":""}