{"version":3,"file":"static/js/517.ff306aed.chunk.js","mappings":"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","sources":["pages/test3/test3.jsx","routes/test3.jsx"],"sourcesContent":["import * as THREE from 'three'\r\nimport { useRef, useState } from 'react'\r\nimport {\r\n    useGLTF,\r\n    OrbitControls,\r\n    MeshReflectorMaterial,\r\n    Environment,\r\n    CameraShake,\r\n    useCursor,\r\n} from '@react-three/drei'\r\nimport { useFrame, useThree } from '@react-three/fiber'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst material = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(221,94,115)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material1 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(173,165,165)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material2 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(1,140,210)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material3 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(1,100,122)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material4 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(234,190,160)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material5 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(255,188,167)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nconst material6 = new THREE.MeshPhysicalMaterial({\r\n    color: new THREE.Color('rgb(151,200,65)').convertSRGBToLinear(),\r\n    roughness: 0,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 0,\r\n})\r\n\r\nexport default function Index({ props }) {\r\n    const [hovered, setHover] = useState(false)\r\n    useCursor(hovered)\r\n\r\n    const navigate = useNavigate()\r\n    const goto = (e) => {\r\n        setTimeout(() => {\r\n            navigate(\"/Halls\", { state: e, });\r\n        }, 100)\r\n    }\r\n\r\n    const group = useRef()\r\n\r\n    const Model = () => {\r\n        const { nodes } = useGLTF(\"/model/pinkd.glb\");\r\n        return (\r\n            <group ref={group} {...props} dispose={null}>\r\n                {/* <MeshReflectorMaterial\r\n          resolution={1024}\r\n          receiveShadow\r\n          mirror={8}\r\n          mixBlur={1}\r\n          mixStrength={0.3}\r\n          depthScale={1}\r\n          minDepthThreshold={0.8}\r\n          maxDepthThreshold={1}\r\n          position={[0, 0, 8]}\r\n          scale={[2, 2, 1]}\r\n          rotation={[-Math.PI / 2, 0, Math.PI]}\r\n          args={[70, 70]}>\r\n          {(Material, props) => <Material metalness={0.25} color=\"rgb(207,216,220)\" roughness={1} {...props} />}\r\n        </MeshReflectorMaterial> */}\r\n\r\n                <mesh rotation={[-Math.PI / 2, 0, 0]}>\r\n                    <planeGeometry args={[100, 100]} />\r\n                    <MeshReflectorMaterial\r\n                        // blur={[300, 100]}\r\n                        resolution={2048}\r\n                        mixBlur={1}\r\n                        // mixStrength={1}\r\n                        roughness={1}\r\n                        depthScale={1.2}\r\n                        minDepthThreshold={0.4}\r\n                        maxDepthThreshold={1.4}\r\n                        color=\"rgb(207,216,220)\"\r\n                        metalness={0.5}\r\n                    />\r\n                </mesh>\r\n\r\n                {/* 圆柱 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material1}\r\n                    geometry={nodes.Cylinder.geometry}\r\n                    position={[-12.3, 2.41, 1.53]}\r\n                    scale={[1, 1.2, 1]}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(1) }}\r\n                />\r\n                {/* 环 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material2}\r\n                    geometry={nodes.Torus.geometry}\r\n                    position={[-5, 4, 0.73]}\r\n                    rotation={[Math.PI / 2, 0, 0]}\r\n                    scale={[3, 3, 3]}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(2) }}\r\n                />\r\n                {/* 球 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material3}\r\n                    geometry={nodes.Sphere001.geometry}\r\n                    position={[11, 3.97, 2]}\r\n                    rotation={[0, 0, 0]}\r\n                    scale={[4, 4, 4]}\r\n                    style={{}}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(3) }}\r\n                />\r\n                {/* 正方体 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material4}\r\n                    geometry={nodes.Cube.geometry}\r\n                    position={[-2, 1.8, 8]}\r\n                    rotation={[0, 0.42, 0]}\r\n                    scale={[1.7, 1.7, 1.7]}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(4) }}\r\n                />\r\n                {/* 圆锥 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material5}\r\n                    geometry={nodes.Cone.geometry}\r\n                    position={[4, 2.5, 13]}\r\n                    scale={[2.5, 2.5, 2.5]}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(5) }}\r\n                />\r\n                {/* 缺口圆柱 */}\r\n                {/* <mesh receiveShadow castShadow material={material} geometry={nodes.Cylinder002.geometry} position={[-1.15, 3.38, 14.39]} rotation={[0, Math.PI, 0]} /> */}\r\n                {/* 高尔夫 */}\r\n                <mesh\r\n                    receiveShadow\r\n                    castShadow\r\n                    material={material6}\r\n                    geometry={nodes.Icosphere001.geometry}\r\n                    position={[-7, 1.5, 15]}\r\n                    rotation={[-0.26, 0.04, -0.16]}\r\n                    scale={[1.4, 1.4, 1.4]}\r\n                    // onPointerOver={(e) => (e.stopPropagation(), setHover(true))}\r\n                    // onPointerOut={(e) => setHover(false)}\r\n                    onClick={() => { goto(6) }}\r\n                />\r\n            </group>\r\n        )\r\n    }\r\n\r\n    const Lights = () => {\r\n        const ref = useRef()\r\n        useFrame((_) => (ref.current.rotation.x = _.clock.elapsedTime))\r\n        return (\r\n            <group ref={ref}>\r\n                <rectAreaLight width={15} height={100} position={[30, 30, -10]} intensity={5} onUpdate={(self) => self.lookAt(0, 0, 0)} />\r\n            </group>\r\n        )\r\n    }\r\n\r\n    const Rig = () => {\r\n        const [vec] = useState(() => new THREE.Vector3())\r\n        const { camera, mouse } = useThree()\r\n        useFrame(() => camera.position.lerp(vec.set(mouse.x * 2, 8, 40), 0.05))\r\n        // return <CameraShake maxYaw={0.01} maxPitch={0.01} maxRoll={0.01} yawFrequency={0.5} pitchFrequency={0.5} rollFrequency={0.4} />\r\n        return <CameraShake maxYaw={0} maxPitch={0} maxRoll={0} yawFrequency={0} pitchFrequency={0} rollFrequency={0} />\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ambientLight intensity={0.5} />\r\n            <Model position={[-4.5, -4, 0]} rotation={[0, -2.8, 0]} />\r\n            {/* <spotLight position={[50, 50, -30]} castShadow /> */}\r\n            {/* <pointLight position={[-10, -10, -10]} color=\"white\" intensity={3} /> */}\r\n            {/* <pointLight position={[0, -5, 5]} intensity={0.5} /> */}\r\n            <directionalLight position={[0, -5, 20]} color=\"white\" intensity={2} />\r\n            <Lights />\r\n            <Rig />\r\n            <Environment files={'/hdr/warehouse.hdr'} />\r\n\r\n            <OrbitControls\r\n                makeDefault\r\n                minAzimuthAngle={0}\r\n                // maxAzimuthAngle={Math.PI / 2}\r\n                // minPolarAngle={Math.PI / 3}\r\n                // maxPolarAngle={Math.PI / 3}\r\n                enableZoom={true}\r\n                enablePan={true}\r\n                zoomSpeed={0.3}\r\n            />\r\n\r\n        </>\r\n    );\r\n}","import {\r\n    Canvas\r\n} from \"@react-three/fiber\";\r\nimport Test3 from \"../pages/test3/test3\";\r\nimport { Suspense } from \"react\";\r\n\r\n\r\n/**\r\n * 3D渲染页面\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function Home() {\r\n    // const [planetFrameState, planetFrameDispatch] = useReducer(reducer, '', init);\r\n\r\n    return (\r\n        <Suspense>\r\n            <div style={{ width: '100vw', height: '100vh', background: 'rgb(221,223,224)', }}>\r\n                {/* <Canvas style={{ width: '100vw', height: '100vh' }}\r\n          camera={{ position: [10, 10, 10], zoom: 10, }}\r\n          shadows\r\n          dpr={[2, 2]}\r\n        > */}\r\n                <Canvas\r\n                    // style={{ width: '100vw', height: '100vh' }}\r\n                    shadows\r\n                    dpr={[1, 2]}\r\n                    camera={{ position: [0, 15, 80], fov: 20 }}\r\n                >\r\n                    <Test3 />\r\n                </Canvas>\r\n            </div>\r\n        </Suspense>\r\n    );\r\n}\r\n"],"names":["material1","THREE","color","convertSRGBToLinear","roughness","clearcoat","clearcoatRoughness","material2","material3","material4","material5","material6","Index","props","useState","hovered","useCursor","navigate","useNavigate","goto","e","setTimeout","state","group","useRef","Model","nodes","useGLTF","ref","dispose","rotation","Math","PI","args","MeshReflectorMaterial","resolution","mixBlur","depthScale","minDepthThreshold","maxDepthThreshold","metalness","receiveShadow","castShadow","material","geometry","Cylinder","position","scale","onClick","Torus","Sphere001","style","Cube","Cone","Icosphere001","Lights","useFrame","_","current","x","clock","elapsedTime","width","height","intensity","onUpdate","self","lookAt","Rig","vec","useThree","camera","mouse","lerp","set","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","Environment","files","OrbitControls","makeDefault","minAzimuthAngle","enableZoom","enablePan","zoomSpeed","Home","Suspense","background","shadows","dpr","fov"],"sourceRoot":""}